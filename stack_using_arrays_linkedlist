// //is empty,is full
// #include <stdio.h>
// #include <stdlib.h>
 
// struct stack
// {
//     int size;
//     int top;
//     int *arr;
// };
 
// int isEmpty(struct stack *ptr)
// {
//     if (ptr->top == -1)
//     {
//         return 1;
//     }
//     else
//     {
//         return 0;
//     }
// }
 
// int isFull(struct stack *ptr)
// {
//     if (ptr->top == ptr->size - 1)
//     {
//         return 1;
//     }
//     else
//     {
//         return 0;
//     }
// }
 
// int main()
// {
//     // struct stack s;
//     // s.size = 80;
//     // s.top = -1;
//     // s.arr = (int *) malloc(s.size * sizeof(int));
 
//     struct stack *s;
//     s->size = 80;
//     s->top = -1;
//     s->arr = (int *)malloc(s->size * sizeof(int));//memory allocation
 
//     return 0;
// }
// // Pushing an element manually
// s->arr[0] = 7;
// s->top++;

// // Check if stack is empty
// if(isEmpty(s)){
//     printf("The stack is empty");
// }
// else{
//     printf("The stack is not empty");
// }

// //push pop
// // #include<stdio.h>
// // #include<stdlib.h>
 
// // struct stack{
// //     int size ;
// //     int top;
// //     int * arr;
// // };
 
// // int isEmpty(struct stack* ptr){
//     if(ptr->top == -1){
//             return 1;
//         }
//         else{
//             return 0;
//         }
// }
 
// int isFull(struct stack* ptr){
//     if(ptr->top == ptr->size - 1){
//         return 1;
//     }
//     else{
//         return 0;
//     }
// }
 
// void push(struct stack* ptr, int val){
//     if(isFull(ptr)){
//         printf("Stack Overflow! Cannot push %d to the stack\n", val);
//     }
//     else{
//         ptr->top++;
//         ptr->arr[ptr->top] = val;
//     }
// }
 
// int pop(struct stack* ptr){
//     if(isEmpty(ptr)){
//         printf("Stack Underflow! Cannot pop from the stack\n");
//         return -1;
//     }
//     else{
//         int val = ptr->arr[ptr->top];
//         ptr->top--;
//         return val;
//     }
// }
 
// int main(){
//     struct stack *sp = (struct stack *) malloc(sizeof(struct stack));
//     sp->size = 10;
//     sp->top = -1;
//     sp->arr = (int *) malloc(sp->size * sizeof(int));
//     printf("Stack has been created successfully\n");
 
//     return 0;
// }

//peek operation
// #include<stdio.h>
// #include<stdlib.h>
 
// struct stack{
//     int size ;
//     int top;
//     int * arr;
// };
 
// int isEmpty(struct stack* ptr){
//     if(ptr->top == -1){
//             return 1;
//         }
//         else{
//             return 0;
//         }
// }
 
// int isFull(struct stack* ptr){
//     if(ptr->top == ptr->size - 1){
//         return 1;
//     }
//     else{
//         return 0;
//     }
// }
 
// void push(struct stack* ptr, int val){
//     if(isFull(ptr)){
//         printf("Stack Overflow! Cannot push %d to the stack\n", val);
//     }
//     else{
//         ptr->top++;
//         ptr->arr[ptr->top] = val;
//     }
// }
 
// int pop(struct stack* ptr){
//     if(isEmpty(ptr)){
//         printf("Stack Underflow! Cannot pop from the stack\n");
//         return -1;
//     }
//     else{
//         int val = ptr->arr[ptr->top];
//         ptr->top--;
//         return val;
//     }
// }
 
// int peek(struct stack* sp, int i){
//     int arrayInd = sp->top -i + 1;
//     if(arrayInd < 0){
//         printf("Not a valid position for the stack\n");
//         return -1;
//     }
//     else{
//         return sp->arr[arrayInd];
//     }
// }
// int main(){
//     struct stack *sp = (struct stack *) malloc(sizeof(struct stack));
//     sp->size = 50;
//     sp->top = -1;
//     sp->arr = (int *) malloc(sp->size * sizeof(int));
//     printf("Stack has been created successfully\n");
 
//     printf("Before pushing, Full: %d\n", isFull(sp));
//     printf("Before pushing, Empty: %d\n", isEmpty(sp));
       
//     return 0;
// }
// Now, we can peek into this stack array and print all the elements using a loop.

//     // Printing values from the stack
//     for (int j = 1; j <= sp->top + 1; j++)
//     {
//         printf("The value at position %d is %d\n", j, peek(sp, j));
//     }

//functions
// int stackTop(struct stack* sp){
//     return sp->arr[sp->top];
// }
 
// int stackBottom(struct stack* sp){
//     return sp->arr[0];
// }

//stack using linked list
// #include<stdio.h>
// #include<stdlib.h>
 
// struct Node{
//     int data;
//     struct Node * next;
// };
 
// void linkedListTraversal(struct Node *ptr)
// {
//     while (ptr != NULL)
//     {
//         printf("Element: %d\n", ptr->data);
//         ptr = ptr->next; 
//     }
// }
 
// int isEmpty(struct Node* top){
//     if (top==NULL){
//         return 1;
//     }
//     else{
//         return 0;
//     }
// }
 
// int isFull(struct Node* top){
//     struct Node* p = (struct Node*)malloc(sizeof(struct Node));
//     if(p==NULL){
//         return 1;
//     }
//     else{
//         return 0;
//     }
// }
 
// struct Node* push(struct Node* top, int x){
//     if(isFull(top)){
//         printf("Stack Overflow\n");
//     }
//     else{
//         struct Node* n = (struct Node*) malloc(sizeof(struct Node));
//         n->data = x;
//         n->next = top;
//         top = n;
//         return top;
//     }
// }
 
// int pop(struct Node** top){
//     if(isEmpty(*top)){
//         printf("Stack Underflow\n");
//     }
//     else{
//         struct Node* n = *top;
//         *top = (*top)->next;
//         int x = n->data;
//         free(n);
//         return x; 
//     }
// }
 
// int main(){
//     struct Node* top = NULL;
//     return 0;
// }
