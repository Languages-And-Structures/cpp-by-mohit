// // second largest max and min
// #include <stdio.h>
// int main()
// {
//     int arr[10], n, i;
//     int max, secondMax, min, secondMin;

//     // Input array size
//     printf("Enter size (max 10): ");
//     scanf("%d", &n);

//     // Input array elements
//     printf("Enter %d elements:\n", n);
//     for (i = 0; i < n; i++)
//         scanf("%d", &arr[i]);

//     // Initialize max and min values
//     max = secondMax = arr[0];
//     min = secondMin = arr[0];

//     // Loop to find 2nd largest and 2nd smallest
//     for (i = 1; i < n; i++)
//     {
//         // Find largest and 2nd largest
//         if (arr[i] > max)
//         {
//             secondMax = max;
//             max = arr[i];
//         }
//         else if (arr[i] > secondMax && arr[i] != max)
//         {
//             secondMax = arr[i];
//         }

//         // Find smallest and 2nd smallest
//         if (arr[i] < min)
//         {
//             secondMin = min;
//             min = arr[i];
//         }
//         else if (arr[i] < secondMin && arr[i] != min)
//         {
//             secondMin = arr[i];
//         }
//     }

//     printf("2nd Largest: %d\n", secondMax);
//     printf("2nd Smallest: %d\n", secondMin);

//     return 0;
// }

// reverse an array
// #include <stdio.h>
// // A function to show how to reverse
// void reversingArray(int arr[], int size)
// {
//     int start = 0, end = size - 1, temp;
//     while (start < end)
//     {
//         // swapping
//         temp = arr[start];
//         arr[start] = arr[end];
//         arr[end] = temp;
//         start++;
//         end--;
//     }
// }

// int main()
// {
//     int arr[10], n, i;
//     // taking input size of array
//     printf("Enter size of array: ");
//     scanf("%d", &n);
//     // entering array elements
//     printf("Enter array elements:\n");
//     for (i = 0; i < n; i++)
//         scanf("%d", &arr[i]);
//     // calling function
//     reversingArray(arr, n);
//     // printing reversed array
//     printf("Reversed Array:\n");
//     for (i = 0; i < n; i++)
//         printf("%d ", arr[i]);

//     return 0;
// }

// merging of sorted arrays into one
// #include <stdio.h>
// // function for merging
// void mergeSortedArrays(int arr1[], int size1, int arr2[], int size2, int merged[])
// {
//     int i = 0, j = 0, k = 0;

//     // Merge until one of the arrays is exhausted
//     while (i < size1 && j < size2)
//     {
//         if (arr1[i] < arr2[j])
//         {
//             merged[k++] = arr1[i++];
//         }
//         else
//         {
//             merged[k++] = arr2[j++];
//         }
//     }

//     // Copy any remaining elements from arr1
//     while (i < size1)
//     {
//         merged[k++] = arr1[i++];
//     }

//     // Copy any remaining elements from arr2
//     while (j < size2)
//     {
//         merged[k++] = arr2[j++];
//     }
// }

// int main()
// {
//     int arr1[] = {1, 3, 5, 7};
//     int arr2[] = {2, 4, 6, 8};
//     int size1 = sizeof(arr1) / sizeof(arr1[0]);
//     int size2 = sizeof(arr2) / sizeof(arr2[0]);
//     int merged[size1 + size2];
//     // function call
//     mergeSortedArrays(arr1, size1, arr2, size2, merged);
//     // printing array
//     printf("Merged array: ");
//     for (int i = 0; i < size1 + size2; i++)
//     {
//         printf("%d ", merged[i]);
//     }
//     printf("\n");

//     return 0;
// }

// finding numbers
//  #include <stdio.h>
// function to find missing number
//  int findMissingNumber(int arr[], int n) {
//      int total = n * (n + 1) / 2;
//      int sum = 0;

//     for (int i = 0; i < n - 1; i++) {
//         sum += arr[i];
//     }

//     return total - sum;
// }

// int main() {
//     int arr[] = {1, 2, 4, 5, 6}; // Missing 3
//     int n = 6; // Numbers should be from 1 to 6
// calling function
//     int missing = findMissingNumber(arr, n);
//     printf("Missing number is: %d\n", missing);

//     return 0;
// }
