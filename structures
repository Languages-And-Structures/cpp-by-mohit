// //ADT
// #include<stdio.h>
// #include<stdlib.h>

// struct myArray
// {
//     int total_size;
//     int used_size;
//     int *ptr;
// };

// void createArray(struct myArray * a, int tSize, int uSize){
//     // (*a).total_size = tSize;
//     // (*a).used_size = uSize;
//     // (*a).ptr = (int *)malloc(tSize * sizeof(int));

//     a->total_size = tSize;
//     a->used_size = uSize;
//     a->ptr = (int *)malloc(tSize * sizeof(int));
// }

// void show(struct myArray *a){
//     for (int i = 0; i < a->used_size; i++)
//     {
//         printf("%d\n", (a->ptr)[i]);
//     }
// }

// void setVal(struct myArray *a){
//     int n;
//     for (int i = 0; i < a->used_size; i++)
//     {
//         printf("Enter element %d", i);
//         scanf("%d", &n);
//         (a->ptr)[i] = n;
//     }
    
// }

// int main(){
//     struct myArray marks;
//     createArray(&marks, 10, 2);
//     printf("We are running setVal now\n");
//     setVal(&marks);

//     printf("We are running show now\n");
//     show(&marks);

//     return 0;
// }

//insertion
// #include<stdio.h>
 
 
// void display(int arr[], int n){
//     // Code for Traversal
//     for (int i = 0; i < n; i++)
//     {
//         printf("%d ", arr[i]);
//     }
//     printf("\n");   
// }
 
// int indInsertion(int arr[], int size, int element, int capacity, int index){
//     // code for Insertion
//     if(size>=capacity){
//         return -1;
//     }
//     for (int i = size-1; i >=index; i--)
//     {
//         arr[i+1] = arr[i];
//     } 
//     arr[index] = element;
//     return 1; 
// }
 
// int main(){
//     int arr[100] = {7, 8, 12, 27, 88};
//     int size = 5, element = 45, index=1;
//     display(arr, size); 
//     indInsertion(arr, size, element, 100, index);
//     size +=1;
//     display(arr, size);
//     return 0;
// }

//linear search,binary search
// #include<stdio.h>
 
// int linearSearch(int arr[], int size, int element){
//     for (int i = 0; i < size; i++)
//     {
//         if(arr[i]==element){
//             return i;
//         }
//     }
//     return -1;
// }
 
// int binarySearch(int arr[], int size, int element){
//     int low, mid, high;
//     low = 0;
//     high = size-1;
//     // Keep searching until low <= high
//     while(low<=high){
//         mid = (low + high)/2;
//         if(arr[mid] == element){
//             return mid;
//         }
//         if(arr[mid]<element){
//             low = mid+1;
//         }
//         else{
//             high = mid -1;
//         }
//     } 
//     return -1;
    
// }
 
// int main(){
//     // Unsorted array for linear search
//     // int arr[] = {1,3,5,56,4,3,23,5,4,54634,56,34};
//     // int size = sizeof(arr)/sizeof(int);
 
//     // Sorted array for binary search
//     int arr[] = {1,3,5,56,64,73,123,225,444};
//     int size = sizeof(arr)/sizeof(int);
//     int element = 444;
//     int searchIndex = binarySearch(arr, size, element);
//     printf("The element %d was found at index %d \n", element, searchIndex);
//     return 0;
// }

//linked list
// #include <stdio.h>
// #include <stdlib.h>
 
// struct Node
// {
//     int data;
//     struct Node *next;
// };
 
// void linkedListTraversal(struct Node *ptr)//pointer to head

// {
//     while (ptr != NULL)
//     {
//         printf("Element: %d\n", ptr->data);
//         ptr = ptr->next;
//     }
// }
 
// int main()
// {
//     struct Node *head;
//     struct Node *second;
//     struct Node *third;
//     struct Node *fourth;
 
//     // Allocate memory for nodes in the linked list in Heap
//     head = (struct Node *)malloc(sizeof(struct Node));
//     second = (struct Node *)malloc(sizeof(struct Node));
//     third = (struct Node *)malloc(sizeof(struct Node));
//     fourth = (struct Node *)malloc(sizeof(struct Node));
 
//     // Link first and second nodes
//     head->data = 7;
//     head->next = second;
 
//     // Link second and third nodes
//     second->data = 11;
//     second->next = third;
 
//     // Link third and fourth nodes
//     third->data = 41;
//     third->next = fourth;
 
//     // Terminate the list at the third node
//     fourth->data = 66;
//     fourth->next = NULL;
 
//     linkedListTraversal(head);
//     return 0;
// }
// Syntax for creating a node:

// struct Node *ptr = (struct Node*) malloc (sizeof (struct Node))

//linked list insertion
// #include<stdio.h>
// #include<stdlib.h>

// struct Node{
//     int data;
//     struct Node * next;
// };

// void linkedListTraversal(struct Node *ptr)
// {
//     while (ptr != NULL)
//     {
//         printf("Element: %d\n", ptr->data);
//         ptr = ptr->next;
//     }
// }

// // Case 1
// struct Node * insertAtFirst(struct Node *head, int data){
//     struct Node * ptr = (struct Node *) malloc(sizeof(struct Node));
//     ptr->data = data;

//     ptr->next = head;
//     return ptr; 
// }

// // Case 2
// struct Node * insertAtIndex(struct Node *head, int data, int index){
//     struct Node * ptr = (struct Node *) malloc(sizeof(struct Node));
//     struct Node * p = head;
//     int i = 0;

//     while (i!=index-1)
//     {
//         p = p->next;
//         i++;
//     }
//     ptr->data = data;
//     ptr->next = p->next;
//     p->next = ptr;
//     return head;
// }

// // Case 3
// struct Node * insertAtEnd(struct Node *head, int data){
//     struct Node * ptr = (struct Node *) malloc(sizeof(struct Node));
//     ptr->data = data;
//     struct Node * p = head;

//     while(p->next!=NULL){
//         p = p->next;
//     }
//     p->next = ptr;
//     ptr->next = NULL;
//     return head;
// }

// // Case 4
// struct Node * insertAfterNode(struct Node *head, struct Node *prevNode, int data){
//     struct Node * ptr = (struct Node *) malloc(sizeof(struct Node));
//     ptr->data = data;

//     ptr->next = prevNode->next;
//     prevNode->next = ptr;

    
//     return head;
// }


// int main(){
//     struct Node *head;
//     struct Node *second;
//     struct Node *third;
//     struct Node *fourth;

//     // Allocate memory for nodes in the linked list in Heap
//     head = (struct Node *)malloc(sizeof(struct Node));
//     second = (struct Node *)malloc(sizeof(struct Node));
//     third = (struct Node *)malloc(sizeof(struct Node));
//     fourth = (struct Node *)malloc(sizeof(struct Node));

//     // Link first and second nodes
//     head->data = 7;
//     head->next = second;

//     // Link second and third nodes
//     second->data = 11;
//     second->next = third;

//     // Link third and fourth nodes
//     third->data = 41;
//     third->next = fourth;

//     // Terminate the list at the third node
//     fourth->data = 66;
//     fourth->next = NULL;

//     printf("Linked list before insertion\n");
//     linkedListTraversal(head);
//     // head = insertAtFirst(head, 56);
//     // head = insertAtIndex(head, 56, 1);
//     // head = insertAtEnd(head, 56);
//     head = insertAfterNode(head, third, 45);
//     printf("\nLinked list after insertion\n");
//     linkedListTraversal(head);

    
//     return 0;
// }

//deletion of linked list
// #include <stdio.h>
// #include <stdlib.h>

// struct Node
// {
//     int data;
//     struct Node *next;
// };

// void linkedListTraversal(struct Node *ptr)
// {
//     while (ptr != NULL)
//     {
//         printf("Element: %d\n", ptr->data);
//         ptr = ptr->next;
//     }
// }

// // Case 1: Deleting the first element from the linked list
// struct Node * deleteFirst(struct Node * head){
//     struct Node * ptr = head;
//     head = head->next;
//     free(ptr);
//     return head;
// }

// // Case 2: Deleting the element at a given index from the linked list
// struct Node * deleteAtIndex(struct Node * head, int index){
//     struct Node *p = head;
//     struct Node *q = head->next;
//     for (int i = 0; i < index-1; i++)
//     {
//         p = p->next;
//         q = q->next;
//     }
    
//     p->next = q->next;
//     free(q);
//     return head;
// }

// // Case 3: Deleting the last element
// struct Node * deleteAtLast(struct Node * head){
//     struct Node *p = head;
//     struct Node *q = head->next;
//     while(q->next !=NULL)
//     {
//         p = p->next;
//         q = q->next;
//     }
    
//     p->next = NULL;
//     free(q);
//     return head;
// }


// // Case 4: Deleting the element with a given value from the linked list
// struct Node * deleteAtIndex(struct Node * head, int value){
//     struct Node *p = head;
//     struct Node *q = head->next;
//     while(q->data!=value && q->next!= NULL)
//     {
//         p = p->next;
//         q = q->next;
//     }
    
//     if(q->data == value){
//         p->next = q->next;
//         free(q);
//     }
//     return head;
// }
// int main()
// {
//     struct Node *head;
//     struct Node *second;
//     struct Node *third;
//     struct Node *fourth;

//     // Allocate memory for nodes in the linked list in Heap
//     head = (struct Node *)malloc(sizeof(struct Node));
//     second = (struct Node *)malloc(sizeof(struct Node));
//     third = (struct Node *)malloc(sizeof(struct Node));
//     fourth = (struct Node *)malloc(sizeof(struct Node));

//     // Link first and second nodes
//     head->data = 4;
//     head->next = second;

//     // Link second and third nodes
//     second->data = 3;
//     second->next = third;

//     // Link third and fourth nodes
//     third->data = 8;
//     third->next = fourth;

//     // Terminate the list at the third node
//     fourth->data = 1;
//     fourth->next = NULL;

//     printf("Linked list before deletion\n");
//     linkedListTraversal(head);

//     // head = deleteFirst(head); // For deleting first element of the linked list
//     // head = deleteAtIndex(head, 2);
//     head = deleteAtLast(head);
//     printf("Linked list after deletion\n");
//     linkedListTraversal(head);

//     return 0;
// }

//circular linked list
// #include<stdio.h>
// #include<stdlib.h>
 
// struct Node
// {
//     int data;
//     struct Node *next;
// };
 
// void linkedListTraversal(struct Node *head){
//     struct Node *ptr = head;
//     do{
//         printf("Element is %d\n", ptr->data);
//         ptr = ptr->next;
//     }while(ptr!=head);
// }
 
// struct Node * insertAtFirst(struct Node *head, int data){
//     struct Node * ptr = (struct Node *) malloc(sizeof(struct Node));
//     ptr->data = data;
 
//     struct Node * p = head->next;
//     while(p->next != head){
//         p = p->next;
//     }
//     // At this point p points to the last node of this circular linked list
 
//     p->next = ptr;
//     ptr->next = head;
//     head = ptr;
//     return head;
 
// }
 
// int main(){
    
//     struct Node *head;
//     struct Node *second;
//     struct Node *third;
//     struct Node *fourth;
 
//     // Allocate memory for nodes in the linked list in Heap
//     head = (struct Node *)malloc(sizeof(struct Node));
//     second = (struct Node *)malloc(sizeof(struct Node));
//     third = (struct Node *)malloc(sizeof(struct Node));
//     fourth = (struct Node *)malloc(sizeof(struct Node));
 
//     // Link first and second nodes
//     head->data = 4;
//     head->next = second;
 
//     // Link second and third nodes
//     second->data = 3;
//     second->next = third;
 
//     // Link third and fourth nodes
//     third->data = 6;
//     third->next = fourth;
 
//     // Terminate the list at the third node
//     fourth->data = 1;
//     fourth->next = head;
 
//     return 0;
// }

//doubly linked list
// #include<stdio.h>
// #include<stdlib.h>

// struct Node
// {
//     int data;
//     struct Node *next;
// };

// void linkedListTraversal(struct Node *head){
//     struct Node *ptr = head;
//     do{
//         printf("Element is %d\n", ptr->data);
//         ptr = ptr->next;
//     }while(ptr!=head);
// }

// struct Node * insertAtFirst(struct Node *head, int data){
//     struct Node * ptr = (struct Node *) malloc(sizeof(struct Node));
//     ptr->data = data;

//     struct Node * p = head->next;
//     while(p->next != head){
//         p = p->next;
//     }
//     // At this point p points to the last node of this circular linked list

//     p->next = ptr;
//     ptr->next = head;
//     head = ptr;
//     return head;

// }

// int main(){
    
//     struct Node *head;
//     struct Node *second;
//     struct Node *third;
//     struct Node *fourth;

//     // Allocate memory for nodes in the linked list in Heap
//     head = (struct Node *)malloc(sizeof(struct Node));
//     second = (struct Node *)malloc(sizeof(struct Node));
//     third = (struct Node *)malloc(sizeof(struct Node));
//     fourth = (struct Node *)malloc(sizeof(struct Node));

//     // Link first and second nodes
//     head->data = 4;
//     head->next = second;

//     // Link second and third nodes
//     second->data = 3;
//     second->next = third;

//     // Link third and fourth nodes
//     third->data = 6;
//     third->next = fourth;

//     // Terminate the list at the third node
//     fourth->data = 1;
//     fourth->next = head;

//     printf("Circular Linked list before insertion\n");
//     linkedListTraversal(head);
//     head = insertAtFirst(head, 54);
//     head = insertAtFirst(head, 58);
//     head = insertAtFirst(head, 59);
//     printf("Circular Linked list after insertion\n");
//     linkedListTraversal(head);
//     return 0;
// }
// link* delete_at_index(link* head, int index) {
//     if (head == NULL || index < 1) {
//         printf("Invalid index\n");
//         return head;
//     }

//     link* current = head;

//     // Traverse to the node at the given index
//     for (int i = 1; current != NULL && i < index; i++) {
//         current = current->Next;
//     }

//     // If index is out of bounds
//     if (current == NULL) {
//         printf("Index out of bounds\n");
//         return head;
//     }
//problem here
//     // If deleting the head node
//     if (current->Prev == NULL) {
//         head = current->Next;
//         if (head != NULL) {
//             head->Prev = NULL;
//         }
//     } 
//     // If deleting a middle or last node
//     else {
//         current->Prev->Next = current->Next;
//         if (current->Next != NULL) {
//             current->Next->Prev = current->Prev;
//         }
//     }

//     free(current);  // Free the memory of the deleted node
//     return head;
// }

#include <stdio.h>
#include <stdlib.h>

typedef struct stack
{
    int top;
    int size;
    int *arr;
} s1;

int isEmpty(s1 *s)
{
    if(s->top==-1){
        return 1;
    }
    else{
        return 0;
    }
}

int isFull(s1 *s)
{
    if(s->top==s->size-1){
        return 1;
    }
    else{
        return 0;
    }
}

void push(s1 *s,int val){
    if(isFull(s)){
        printf("stack overflow\n");
    }
    else{
        s->top++;
        s->arr[s->top]=val;
    }
} 
int pop(s1 *s){
    if(isEmpty(s)){
        printf("stack underflow\n");
        return -1;
    }
    else{
        int val=s->arr[s->top];
        s->top--; 
        return val;
    }

}
int peek(s1 *s,int i){
    if (s->top-i+1<0)
    {
        printf("invaild\n");
        return -1;
    }
    else{
        return s->arr[s->top-i+1];
    }
    
}

int stacktop(s1 * s){
    return s->arr[s->top];
}

int stacktop(s1 * s){
    return s->arr[0];
}

int main()
{
    s1 *s = (s1 *)malloc(sizeof(s1));
    s->top = -1;
    s->size = 80;
    s->arr = (int *)malloc(s->size * sizeof(int));
    push(s,1);
    push(s,2);
    push(s,3);
    push(s,4);
    push(s,5);
    push(s,6);
    printf("After pushing full:%d\n",isFull(s));
    printf("%d\n",peek(s,2));
return 0;
}